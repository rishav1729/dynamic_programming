#include<iostream>
#include<vector>
#define MAX 1005

std::vector < std::vector<int> > dp(MAX, std::vector<int> (MAX, -1));

int knapsack(std::vector <int> weight,std:: vector <int> value, int maxweight, int index)
{
	//base condition
	if( (index < 0) || (maxweight <= 0) )
		return 0;
	if(dp[index][maxweight] == -1)
	{
		if(weight[index] <= maxweight)
			dp[index][maxweight] =  std::max(value[index] + knapsack(weight, value, maxweight - weight[index], index-1), knapsack(weight, value, maxweight, index-1));
		
		else
			dp[index][maxweight] = knapsack(weight, value, maxweight, index-1);
	}
	return dp[index][maxweight];
}



int main()
{
	int n;
	std::cout<<"Enter the number of items: ";
	std::cin>>n;
	std::vector <int> weight(n), value(n);

	std::cout<<"enter weights: "<<std::endl;
	for(int  i=0; i<n; i++)
		std::cin>>weight[i];
	std::cout<<"enter values: "<<std::endl;
	for(int  i=0; i<n; i++)
		std::cin>>value[i];

	
	int maxweight;

	std::cout<<"Enter maximum capacity of knapsack: ";
	std::cin>>maxweight;

	std::cout<<knapsack(weight, value, maxweight, n-1);
}
